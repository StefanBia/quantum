from qiskit import QuantumCircuit, transpile
from qiskit.visualization import plot_histogram
from qiskit_aer import AerSimulator
import matplotlib.pyplot as plt

# Create a Quantum Circuit with 9 qubits and 4 classical bits for measurements
circuit = QuantumCircuit(9, 4)

# Apply gates to the circuit
circuit.h(0)
circuit.h(1)
circuit.h(2)
circuit.h(3)

# Code word
# Generator 1
circuit.cx(0, 4)
circuit.cz(0, 5)
circuit.cz(0, 6)
circuit.cx(0, 7)

# Generator 2
circuit.cx(1, 5)
circuit.cz(1, 6)
circuit.cz(1, 7)
circuit.cx(1, 8)

# Generator 3
circuit.cx(2, 4)
circuit.cx(2, 6)
circuit.cz(2, 7)
circuit.cz(2, 8)

# Generator 4
circuit.cz(3, 4)
circuit.cx(3, 5)
circuit.cx(3, 7)
circuit.cz(3, 8)

# Apply Hadamard gates at the end
circuit.h(0)
circuit.h(1)
circuit.h(2)
circuit.h(3)

# Measure only the first 4 qubits
for i in range(4):
    circuit.measure(i, i)

# Draw the circuit
circuit.draw('mpl')
plt.show()

# Simulate the circuit
simulator = AerSimulator()
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1024)
result = job.result()

# Get and plot the results
counts = result.get_counts(circuit)
plot_histogram(counts)
plt.show()

# Calculate the probability vector
probabilities = {key: count / 1024 for key, count in counts.items()}
print("Probability Vector:", probabilities)
